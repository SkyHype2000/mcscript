(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{321:function(e,a,t){"use strict";t.r(a);var s=t(17),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_4-minecraft-script-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-minecraft-script-syntax"}},[e._v("#")]),e._v(" 4) Minecraft Script Syntax")]),e._v(" "),a("p",[e._v("The code is written in files with the extension .mcscript. It is recommended to manage the files and to highlight the syntax in a code editor (IDE). explore more "),a("a",{attrs:{href:"#ide"}},[e._v("here")]),e._v(".")]),e._v(" "),a("p",[e._v('Unlike mcfunction, each command is injected with a "/" or "run:".')]),e._v(" "),a("p",[e._v('Comments are announced with "//", if comments should also appear in the new file with "#"')]),e._v(" "),a("p",[e._v("Blank lines and skipping lines are ignored."),a("br"),e._v("\nIf a blank line is desired in the mcfunction, express this with a '#' without a comment."),a("br"),e._v('\nTwo blank lines are reached with "##".')]),e._v(" "),a("p",[e._v("A comment across multiple lines can be expressed with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*\n comment\n*/\n")])])]),a("h2",{attrs:{id:"_4-1-command-grouping-wrapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-command-grouping-wrapping"}},[e._v("#")]),e._v(" 4.1 Command Grouping / Wrapping")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("[subcommand]([argument]){ [wrapped actions] }")])])]),e._v(" "),a("p",[e._v('"as, at, positioned,align,in,dimension,rotated,anchored" can be grouped together:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("as(@a){\n\t/commands \t=> /execute positioned ~ ~ ~ run command\n}\n")])])]),a("p",[e._v("The Argument / Arguments in the brackets have to be a string! (with ' ' or \" \")\nIt is also possible to use "),a("code",[e._v("asat()")]),e._v(" for this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("asat(@s){\n    /commands => execute as @s at @s run commands\n}\n")])])]),a("p",[e._v('"Groups can be listed like so:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("as(@p), at(@s), positioned('~ ~1 ~'){\n\t/say command\n}\n==> /execute as @p at @s positioned ~ ~-1 ~ run say command\n\n// also with if\nas(@p), at(@s), positioned('~ ~1 ~'), if(entity @s[tag=mytag]){\n\t/say command\n}\n==> /execute as @p at @s positioned ~ ~-1 ~ if entity @s[tag=mytag] run say command\n")])])]),a("h2",{attrs:{id:"_4-2-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-functions"}},[e._v("#")]),e._v(" 4.2 Functions")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[run] function "name|path" {\n/commands\n}\n')])])]),a("blockquote",[a("p",[e._v('run optional\na path should be given as string\na name consisting of only characters, can be given without ""')])]),e._v(" "),a("p",[e._v("A function generates a new mcfunction with the given name or path. You can also execute the function directly with the "),a("code",[e._v("run")]),e._v(" keyword.\nThis is an alternative to a more complicated varient with "),a("code",[e._v("#file:")]),e._v(".")]),e._v(" "),a("p",[e._v("e.g:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("run function test {\n\t/say function\n}\n/say not function\n=\n/function prj:test\n/say not function\n\nfile: ./test\n/say function\n")])])]),a("h2",{attrs:{id:"_4-3-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-variables"}},[e._v("#")]),e._v(" 4.3 Variables")]),e._v(" "),a("p",[e._v("Like every other programming language there are variables. They are initialized as follows:\n"),a("code",[e._v("var test")]),e._v("\nThe variable can take in a value:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 5\n or\nvar test\ntest = 6\n")])])]),a("p",[e._v("This value can be changed as often as you like.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test\ntest @s = 10\n")])])]),a("p",[e._v("Values can be assigned also only to special Minecraft selector like so.\nAlso possible with playernames and placeholders:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("test player = 10\n")])])]),a("p",[e._v("Do you want to have a trigger scoreboard? Just include the trigger keyword after the variable name:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test trigger @s = 10\n/scoreboard objectives add test trigger\n/scoreboard players set @s test 10\n")])])]),a("p",[e._v("Every value is saved in an independent scoreboard with itÂ´s name or selector. So they are accessible with normal methods:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test\ntest @s = 10\n/scoreboard players get @s test ==> 10\n/scoreboard players set @s test 5\n etc\n")])])]),a("p",[e._v("Variables can be merged together:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 10\nvar new = 5\n  For the sake of simplicity, I start again and again with these values. The program makes it naturally different!\n\ntest += 2 ==> 12\ntest -= 2 ==> 8\n")])])]),a("p",[e._v("Bit shorter:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("test++ ==> test += 1\ntest-- ==> test -= 1\n\ntest += new ==> 15\ntest -= new ==> 5\ntest *= new ==> 50\ntest /= new ==> 2\ntest %= new ==> 0\n")])])]),a("p",[e._v("** Save command response to variable: **")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var res = run: command\n==> execute store result score res res run command\n")])])]),a("p",[e._v("The result of the command is written to the variable res.\nExample with "),a("code",[e._v("/data get")]),e._v(":\n' var varResult = run: data get entity @s Pos[0] '")]),e._v(" "),a("h2",{attrs:{id:"_4-4-boolean-variables-tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-boolean-variables-tags"}},[e._v("#")]),e._v(" 4.4 Boolean Variables (Tags)")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("bool [name] [selector](optional) = true|false")])])]),e._v(" "),a("p",[e._v("Boolean values can be declared like this.\n"),a("code",[e._v("bool isCool = true => tag [global] add isCool")]),e._v("\nThe variable can be changed later:\n"),a("code",[e._v("isCool = false => tag [global] remove isCool")])]),e._v(" "),a("p",[e._v("With "),a("a",{attrs:{href:"#if"}},[e._v("If")]),e._v(" testable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if(isCool){\n    /commands => execute if entity [global][tag=isCool] run commands\n}\n")])])]),a("h2",{attrs:{id:"_4-5-constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-constants"}},[e._v("#")]),e._v(" 4.5 Constants")]),e._v(" "),a("p",[e._v("Another type of variable is the constant, declared as following:\n"),a("code",[e._v("const test = [value]")]),e._v("\nThis type cannot be changed!")]),e._v(" "),a("p",[e._v("You can use it with "),a("code",[e._v("$ (var_name)")]),e._v(" somewhere in your code to avoid long strings and repetitive phrases:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const aString = "Here can be a string"\nconst aNum = 5\n\n/say $(aString)       ==> /say Here can be a string\nvar test = $(aNum)   ==> var test = 5\n')])])]),a("p",[a("strong",[e._v("Replace constants")]),e._v("\nThe value of an constant can still be changed when used. To do this, add '.repl()' to the constant:")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("$(const).repl([search],[replacement])")])])]),e._v(" "),a("p",[e._v("In our example, we want to replace "),a("code",[e._v("a")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/say $(aString).repl(" a "," the ") ==> /say Here can be the string\n')])])]),a("p",[e._v("Also a "),a("a",{attrs:{href:"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[e._v("RegEx"),a("OutboundLink")],1),e._v(" can be inserted here and can be also accessed with '$&' in the replacement:\n"),a("code",[e._v('$(aString).repl([/regex/],["$&"])')])]),e._v(" "),a("h3",{attrs:{id:"maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maps"}},[e._v("#")]),e._v(" Maps")]),e._v(" "),a("p",[e._v("Maps are essentially key-value pairs kind of like a dictionary. We define it with the Map-operator:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" testMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("In the brackets you can define as many pairs as you like:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" testMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"key1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"key2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value2"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("It then can be accessed with")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("testMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key1\n\nâ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say value\n")])])]),a("h3",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[e._v("#")]),e._v(" Arrays")]),e._v(" "),a("p",[e._v("Arrays are pretty similar to Maps, but use a list of values instead of pairs:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" testArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// index 0")]),e._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value2"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// index 1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("The values can be accessed by the index of the item starting with 0.")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("testArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),e._v("\nâ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say value\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("testArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".1")]),e._v("\nâ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say value2\n")])])]),a("h2",{attrs:{id:"_4-6-if-else-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-if-else-statements"}},[e._v("#")]),e._v(" 4.6 If/Else Statements")]),e._v(" "),a("p",[e._v("If functions are similar to grouping:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("if('statement'){\n\t/commands \t=> /execute if statement run command\n}\n")])])]),a("p",[e._v("With some additional features:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v('In front of every argument a "!" can be inserted to reverse the meaning:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("if(!'statement'){\n\t/commands \t=> /execute unless statement run command\n}\n")])])])]),e._v(" "),a("li",[a("p",[e._v('After the end an "else" can be attached:')])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    if('statement'){\n    \t/commands \t=> /execute if statement run command\n    } else {\t\t   /execute unless statement run command2\n    \t/commands2\n    }\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Important: Do not change the argument!\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    if('entity @s[tag=test]'){\n    \t/tag @s remove test\n    } else {\n    \t/tag @s remove test\n    }\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("They are both executed!! Improved:\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    if('entity @s[tag=test]'){\n    \t/tag @s add testIf\n    }\n    if('entity @s[tag=testIf]'){\n    \t/tag @s remove test\n    \t} else {\n    \t/tag @s remove test\n    }\n")])])]),a("p",[e._v('even "else if" is possible:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    if('statement'){\n    \t/commands \t\t\t\t=> /execute if statement run command\n    } else if('statement2') {\t   /execute unless statement if statement2 run command2\n    \t/commands2\n    }\n")])])]),a("p",[e._v("use the unless keyword to negate the entire condition:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    unless('statement'){\n    \t/commands \t=> /execute unless statement run command\n    }\n")])])]),a("h2",{attrs:{id:"_4-7-logical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-logical-operators"}},[e._v("#")]),e._v(" 4.7 Logical operators")]),e._v(" "),a("p",[e._v("In combination with grouping and if-else statements logical operators can be used:")]),e._v(" "),a("ul",[a("li",[e._v("The or operator can be used in two ways:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    as('@s'||'@p'){\n    \t/command\n    }\n    ==> execute as @s run command\n        execute at @p run command\n\n    # or as list\n    if('entity @s[tag=entity1]','entity @s[tag=entity2]'){\n    \t/command\n    }\n    ==> execute if entity @s[tag=entity1] run command\n        execute if entity @s[tag=entity2] @p run command\n")])])]),a("ul",[a("li",[e._v("The and operator is defined like so (makes only really sense with if)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    if('entity @s'&&'entity @p'){\n    \t/command\n    }\n    ==> execute if entity @s if entity @p run command\n")])])]),a("ul",[a("li",[e._v("check variables:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 5\n\n equally\nif(test == 5){\n    /commands\n}\n\n greater/smaller or equal\nif(test >= 5){\n    /commands\n}\n\n greater/smaller\nif(test > 5){\n    /commands\n}\n\n also avalible as comparison\nif(test > test2){\n    /commands\n}\n\n or with variables with entitys\nif(test @s > test2 @a){\n    /commands\n}\n")])])]),a("h2",{attrs:{id:"_4-8-switch-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-switch-cases"}},[e._v("#")]),e._v(" 4.8 Switch-Cases")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("switch([var_name]){\n    case <=|<|==|>|>= [other_var]|[number] {\n        [actions]\n    },\n    default(optional) {\n        [default actions]\n    }\n}\n")])])]),a("p",[e._v("Switches makes the case distinction much easier. ItÂ´s able to test easily and clearly certain variables.\ne.g:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 10\nswitch(test){\n    case > 10 {\n        /say var is over 10\n    },\n    case < 10 {\n        /say var is under 10\n    },\n    default {\n        /say no match\n    }\n}\n")])])]),a("p",[e._v("Here test is checked for more than 10, if that does not apply to less than 10 and finally outputed as default.\nAlso abbreviable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 10\nswitch(test){\n    case > 10 run: say var is over 10\n    , case < 10 run: say var is under 10\n    , default run: say no match\n}\n")])])]),a("h2",{attrs:{id:"_4-9-for-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-for-loops"}},[e._v("#")]),e._v(" 4.9 For-Loops")]),e._v(" "),a("p",[e._v("One of the most helpful features is the for loop. It takes in neutral numbers.")]),e._v(" "),a("p",[e._v("From "),a("code",[e._v("first Argument")]),e._v(" to "),a("code",[e._v("second Argument")]),e._v(" is optional outputed as "),a("code",[e._v("third Argument")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" for(1,5){\n\t/commands\n\t# is outputed 5 times\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" for(1,5){\n\t/say $(i)\n\t# say with 1 - 5 is outputed 5 times\n}\n")])])]),a("p",[e._v("with $(var_name) the loop variable can be accessed")]),e._v(" "),a("p",[e._v('var_name is out of the box defined as "i", but can be changed with the third argument:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("for(1,5,X){\n\t/say $(X)\n\t# say with 1 - 5 is outputed 5 times}\n")])])]),a("p",[e._v("That makes especially with two-dimensional loops sence:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("for(1,5,i){\n\tfor(1,2,j){\n\t\t/say $(i).$(j)\n\t}\n\t# say with 1.1 - 5,2 is outputed 10 times\n}\n")])])]),a("h2",{attrs:{id:"_4-10-raycasting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-raycasting"}},[e._v("#")]),e._v(" 4.10 Raycasting")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("raycast([distance](optional), [block to travel through](optional),entity | block [target](optional) ){\n    [actions on hitted block or entity]\n},{\n    [actions for every flight step]\n}\ndefault distance = 100 Blocks\ndefault block = air\ndefault target = any block\n")])])]),a("p",[e._v("Raycasting is a big thing in Minecraft 1.13 and provides unlimeted opportunities. But it is a bit difficult, so why not making it easier? With Minecraft Script this is really really easy now:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("raycast {\n    /setblock ~ ~ ~ stone\n}\n")])])]),a("p",[e._v("This alone sets everywhere where you look a stone\nParticles and block limits are also pretty easy:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("raycast(10) {\n    /setblock ~ ~ ~ stone\n}, {\n    /particle flame ~ ~ ~\n}\n")])])]),a("p",[e._v("Now there are beautiful effects and a max range of 10 blocks.\nThe second argument sets the porous blocks.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('raycast(10,"air") {\n    /setblock ~ ~ ~ stone\n}\n')])])]),a("p",[e._v('So the ray only goes through air.\nYou can also negate the porous blocks and set with a "!" the not porous blocks:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('raycast(10,!"white_wool") {\n    /setblock ~ ~ ~ stone\n}\n')])])]),a("p",[e._v("The ray goes through all blocks, but white wool.")]),e._v(" "),a("p",[e._v("As third optional argument a target can be set:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('raycast(10,"air",block "white_wool") {\n    /setblock ~ ~ ~ stone\n}\n')])])]),a("p",[e._v("Now Mcscript knows that the target is a block and executes the command only if the block is white wool.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('raycast(10,"air",entity @e[type=armor_stand]) {\n    /say test\n}\n')])])]),a("p",[e._v("Now Mcscript knows that the target is an entity and executes as the entity if itÂ´s hitted.\nSo the armor stand would say test.")]),e._v(" "),a("h2",{attrs:{id:"_4-11-while-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-11-while-loops"}},[e._v("#")]),e._v(" 4.11 while loops")]),e._v(" "),a("p",[e._v("The while loop is defined like so:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("while([cond]){\n    /commands\n}\n")])])]),a("p",[e._v("The grouped commands are executed as long as the condition [cond] is true.")]),e._v(" "),a("blockquote",[a("p",[e._v("If the condition to start is not true, the grouping will not be executed!")])]),e._v(" "),a("p",[e._v("As a condition, all operators and arguments of the If conditions can be used. e.g.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 0\nwhile(test < 10){\n    /commands here\n    test += 1\n}\n ==> The commands are executed 10x in one tick\n")])])]),a("p",[e._v("For while-loops you can also use stop and continue:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = 0\nwhile(test < 10){\n    test += 1\n    if(test == 5){\n        continue\n        # If test is equal to 5 the other commands are skipped\n    }\n    /commands hier\n    if(test >= 9){\n        stop\n        # If test is equal to or over 5 the loop is stopped\n    }\n}\n")])])]),a("h2",{attrs:{id:"_4-12-do-while-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-12-do-while-loops"}},[e._v("#")]),e._v(" 4.12 do-while-Loops")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n    /commands\n} while([cond])\n")])])]),a("p",[e._v("The do-while loop works in a similar way to the while loop, with the small difference that the code block is executed and then the condition is checked.\nSo the loop is executed at least one time.")]),e._v(" "),a("h2",{attrs:{id:"_4-13-foreach-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-13-foreach-loop"}},[e._v("#")]),e._v(" 4.13 forEach-Loop")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forEach(var [var_name] = [start value]; [var_name] ==|>|<|<=|>=|!= [other_var]|[number]; [varname]++){\n    /commands\n}\n")])])]),a("p",[e._v("The forEach Loop is a loop found in almost any programming language.\nIt is similar to Minecraft Script's for-loop, but it works dynamically (it does not run on generate, but in Minecraft)")]),e._v(" "),a("p",[e._v("e.g:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("forEach(var i = 0; i < 10; i++){\n    /say hey\n}\n")])])]),a("p",[e._v("The Command is executed 10 times and the current value is saved each in the scoreboard i.\nDer Command wird also 10mal ausgefÃ¼hrt und der aktuelle Wert jeweils in dem scoreboard i gespeichert.\nYou can also access the value like so. e.g. Faculty:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var result = 1\nforEach(var i = 2; i <= 10; i++){\n    result *= i\n}\n==> result = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10\n")])])]),a("h2",{attrs:{id:"_4-14-modals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-14-modals"}},[e._v("#")]),e._v(" 4.14 Modals")]),e._v(" "),a("p",[e._v("Modals are like functions or methods. That means you can define them:")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("modal [name]([arguments]){\n    [actions]\n}\n")])])])]),e._v(" "),a("p",[e._v("A modal is always introduced with the keyword followed by the name and the arguments in the brackets.")]),e._v(" "),a("p",[e._v("The arguments are accessible inside with $(argument_name).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("modal newModal(argument){\n\t/say $(argument)\n}\n\nnewModal('test')\n\n# => say test\n")])])]),a("p",[e._v("If you use the modal like that, the values are used and it outputs everything.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("modal createCommand(command,argument1,argument2){\n\t/$(command) $(argument1) $(argument2)\n}\n\ncreateCommand('say', 'hallo', 'du')\n\n# => say hallo du\n")])])]),a("p",[e._v("You are also able to use multiple arguments.")]),e._v(" "),a("p",[e._v("There are optional and predefined arguments, too:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("modal say(argument = \"hallo\"){\n\t/say $(argument)\n}\n\nsay()\n# => say hallo\n\nsay('test')\n# => say test\n")])])]),a("p",[a("strong",[e._v("Using Maps and Arrays")]),e._v("\nYou can also use the "),a("a",{attrs:{href:"#maps"}},[e._v("Map")]),e._v(" and "),a("a",{attrs:{href:"#arrays"}},[e._v("Array")]),e._v(" type of constants in modals:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("modal "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("defaultMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("defaultMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("defaultMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value2"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nâ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say value\nâ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("say value2\n")])])]),a("p",[a("strong",[e._v("Override Modals")]),e._v("\nModals that have already been created can be overridden within the process:")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("override modal [name]([arguments]){\n   [actions]\n}\n")])])])]),e._v(" "),a("p",[e._v("Arguments and actions are exchanged completely and used for the ongoing process.")]),e._v(" "),a("p",[a("strong",[e._v("Replace arguments")]),e._v("\nThe value of an argument can still be changed when used. To do this, add '.repl()' to the argument:")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("$(argument).repl([search],[replacement])")])])]),e._v(" "),a("p",[e._v("In our example, we want to replace an entered test:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/say $(argument).repl("test","no test") ==> /say no test\n')])])]),a("p",[e._v("Also a "),a("a",{attrs:{href:"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[e._v("RegEx"),a("OutboundLink")],1),e._v(" can be inserted here and can be also accessed with '$&' in the replacement:\n"),a("code",[e._v('$(argument).repl([/regex/],["$&"])')])]),e._v(" "),a("h2",{attrs:{id:"_4-15-javascript-modals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-15-javascript-modals"}},[e._v("#")]),e._v(" 4.15 JavaScript Modals")]),e._v(" "),a("p",[e._v("JavaScript Modals are modals, you can write in JavaScript. You can define them like other modals:")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("modaljs [name]([arguments]){\n    [actions]\n    return [Text]\n}\n")])])])]),e._v(" "),a("p",[e._v("The JavaScript Modal must end with the return statement. The returned value will end up in the "),a("code",[e._v(".mcfunction")]),e._v(" file as plain text.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('modaljs newModal(){\n\treturn "say hi";\n}\n\nnewModal()\n\n# => say hi\n')])])]),a("p",[e._v("For multi line output I recommend doing something like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('modaljs newModal(){\n\tvar ret = "";\n\n\tret += "say hi\\n";\n\tret += "say ho\\n";\n\n\treturn ret;\n}\n\nnewModal()\n\n# => say hi\n# => say ho\n')])])]),a("p",[e._v("Note: You need to add line breaks manually with "),a("code",[e._v("\\n")]),e._v(".")]),e._v(" "),a("p",[e._v("A JavaScript modal is always introduced with the keyword followed by the name and the arguments in the brackets.")]),e._v(" "),a("p",[e._v("The arguments are accessible inside with their names.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("modaljs newModal(argument){\n\treturn \"say \" + argument;\n}\n\nnewModal('test')\n\n# => say test\n")])])]),a("p",[e._v("You are also able to use multiple arguments.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('modaljs newModal(text,monster){\n\tvar ret = "";\n\n\tret += "say " + text + "\\n";\n\tret += "summon " + monster + "\\n";\n\n\treturn ret;\n}\n\nnewModal("Brains!!!","minecraft:zombie")\n\n# => say Brains!!!\n# => summon minecraft:zombie\n')])])]),a("p",[e._v("There are optional and predefined arguments, too:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('modaljs say(argument = "hallo"){\n\treturn "say " + argument ;\n}\n\nsay()\n# => say hallo\n\nsay(\'test\')\n# => say test\n')])])]),a("p",[a("strong",[e._v("Tips and tricks")])]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("console.log()")]),e._v(" to output some information to the console while compiling without effecting the return value.")]),e._v(" "),a("h2",{attrs:{id:"_4-16-system-modals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-16-system-modals"}},[e._v("#")]),e._v(" 4.16 System Modals")]),e._v(" "),a("p",[e._v("There are already some helpful predefined modals. Please read the specific documentation "),a("a",{attrs:{href:"https://github.com/Stevertus/mcscript/blob/master/Core%20Modals.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("You have ideas which modals should be a standart? Send me your "),a("a",{attrs:{href:"#ownmodal"}},[e._v("configuration file")]),e._v(" to check.")]),e._v(" "),a("h2",{attrs:{id:"_4-17-error-handling-and-debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-17-error-handling-and-debugging"}},[e._v("#")]),e._v(" 4.17 Error handling and Debugging")]),e._v(" "),a("p",[e._v("Minecraft Script shows since the version 0.2 only limeted errors with line and file displayed.\nPlease use the flag "),a("code",[e._v("-fullErr")]),e._v(" at generation to get the old full errors back, if you want so.")]),e._v(" "),a("p",[e._v("If you find errors that make no sense in the context, please notify the team.")]),e._v(" "),a("p",[a("strong",[e._v("Debug keyword")]),e._v('\nYou can debug your code with the keyword "Debug" and find some errors in Minecraft Script much easier. You can place these anywhere in your code and they have no affect on the compiled output.')]),e._v(" "),a("ul",[a("li",[a("code",[e._v("debug message: [message]")]),e._v("\nSends a simple message with line and file references.")]),e._v(" "),a("li",[a("code",[e._v("debug success: [message]")])]),e._v(" "),a("li",[e._v("Sends a successful message in green with line and file references.")]),e._v(" "),a("li",[a("code",[e._v("debug break: [message]")]),e._v("\nYour program breakes at this point and sends the message obove .")]),e._v(" "),a("li",[a("code",[e._v("debug error: [message]")]),e._v("\nYour program breakes at this point and sends a critical error with system information and relevant code positions.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);